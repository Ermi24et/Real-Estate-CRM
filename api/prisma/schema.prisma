// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  firstName       String
  lastName        String
  email           String  @unique
  password        String
  isEmailVerified Boolean @default(false)
  phoneNumber     String?
  otp             Otp[]
  refreshToken    String?
  leads           Lead[]  @relation("assignedTo")
}

model Otp {
  id        String   @id @default(uuid())
  owner     User?    @relation(fields: [userId], references: [id])
  userId    String?
  code      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model Property {
  id                String   @id @default(uuid())
  name              String   @unique
  price             Int
  builtAt           Int?
  numbersOfRoom     Int      @default(0)
  numbersOfBathRoom Int      @default(0)
  numbersOfBedRoom  Int      @default(0)
  isSold            Boolean  @default(false)
  location          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  images            Image[]
}

model Image {
  id         String   @id @default(uuid())
  url        String
  publicId   String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model Lead {
  id            String        @id @default(uuid())
  name          String
  email         String?
  phone         String?
  source        Source
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  comments      Comment[]
  assignedTo    User?         @relation("assignedTo", fields: [assignedToId], references: [id])
  assignedToId  String?
  opportunities Opportunity[]
}

model Comment {
  id            String       @id @default(uuid())
  content       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  leadId        String?
  Lead          Lead?        @relation(fields: [leadId], references: [id])
  opportunityId String?
  opportunities Opportunity? @relation(fields: [opportunityId], references: [id])
}

model Opportunity {
  id                String    @id @default(uuid())
  stage             Stage
  probability       Decimal?
  expectedCloseDate DateTime?
  estimatedValue    Decimal?
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  assignedToId      String?
  comments          Comment[]
  events            Event[]
  lead              Lead      @relation(fields: [leadId], references: [id])
  leadId            String
}

model Event {
  id            String      @id @default(uuid())
  title         String
  opportunityId String
  Opportunity   Opportunity @relation(fields: [opportunityId], references: [id])
}

enum Source {
  WEBSITE_FORM
  REFERRAL
  ADVERTISING_CAMPAIGN
  LINKEDIN
  FACEBOOK
  INSTAGRAM
}

enum Stage {
  PROSPECTING
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSED_WIN
  CLOSED_LOST
}
